# HN Hidden Gems Finder - Environment Configuration Sample
# Copy this file to .env and adjust values as needed

# ===================
# Flask Configuration
# ===================

# Flask environment: development, production, testing
FLASK_ENV=development

# Enable Flask debug mode (development only)
FLASK_DEBUG=True

# Flask secret key for sessions and security (CHANGE IN PRODUCTION!)
SECRET_KEY=dev-secret-key-change-in-production

# Server configuration
HOST=127.0.0.1
PORT=5000

# ===================
# Database Configuration
# ===================

# Database URL (SQLite for development, PostgreSQL for production)
# SQLite: sqlite:///path/to/database.db
# PostgreSQL: postgresql://username:password@host:port/database
DATABASE_URL=sqlite:///instance/hn_hidden_gems.db

# ===================
# Background Services
# ===================

# Post Collection Service
POST_COLLECTION_INTERVAL_MINUTES=5    # Minutes between collections (0 to disable)
POST_COLLECTION_BATCH_SIZE=25         # Posts to commit per batch
POST_COLLECTION_MAX_STORIES=500       # Max story IDs to fetch per run

# Hall of Fame Monitoring Service
HALL_OF_FAME_INTERVAL_HOURS=6         # Hours between HoF monitoring (0 to disable)

# Super Gems Analysis Service
SUPER_GEMS_INTERVAL_HOURS=6           # Hours between super gems analysis (0 to disable)
SUPER_GEMS_ANALYSIS_HOURS=48          # Hours back to analyze for super gems
SUPER_GEMS_TOP_N=5                    # Number of top gems to analyze per run

# ===================
# Podcast Generation Settings
# ===================

# Podcast Audio Generation (requires Google Cloud TTS)
AUDIO_GENERATION_ENABLED=false        # Enable automatic podcast audio generation
AUDIO_STORAGE_PATH=static/audio       # Directory to store generated audio files
AUDIO_CLEANUP_DAYS=30                 # Delete audio files older than N days

# Google Cloud Text-to-Speech Configuration
GOOGLE_TTS_CREDENTIALS_PATH=path/to/service-account.json  # Path to Google Cloud service account JSON
TTS_LANGUAGE_CODE=en-US               # Language code for TTS (en-US, de-DE, etc.)
TTS_VOICE_NAME=en-US-Neural2-J        # Voice name (see Google Cloud TTS docs)
TTS_AUDIO_ENCODING=MP3                # Audio format (MP3, OGG_OPUS, LINEAR16)

# ===================
# Quality Analysis Settings
# ===================

# Thresholds for identifying hidden gems
KARMA_THRESHOLD=100                   # Max author karma for gems
MIN_INTEREST_SCORE=0.3               # Min quality score for gems

# Legacy polling settings (not used by current scheduler)
POLL_INTERVAL_SECONDS=60              # Seconds between polls (legacy)
MAX_POSTS_PER_POLL=100               # Max posts per poll (legacy)

# ===================
# Logging Configuration
# ===================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log file path (relative to project root)
LOG_FILE=logs/app.log

# ===================
# API Keys
# ===================

# Google Gemini API key (required for super gems analysis and podcast generation)
# Get your key at: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your-gemini-api-key-here

# Google Cloud API key (optional - for TTS service, can use service account instead)
GOOGLE_CLOUD_API_KEY=your-google-cloud-api-key-here

# ===================
# Production Considerations
# ===================

# For production deployments, consider:
# 1. Set FLASK_ENV=production and FLASK_DEBUG=False
# 2. Use a strong, unique SECRET_KEY
# 3. Use PostgreSQL instead of SQLite
# 4. Set up proper logging with LOG_LEVEL=WARNING or higher
# 5. Configure SSL/HTTPS
# 6. Set up monitoring and alerting
# 7. Configure backup strategies for your database
# 8. Enable podcast generation with AUDIO_GENERATION_ENABLED=true
# 9. Set up Google Cloud TTS service account credentials
# 10. Configure audio storage path and cleanup policies

# ===================
# Podcast Feature Setup Guide
# ===================
#
# To enable podcast generation:
# 1. Set AUDIO_GENERATION_ENABLED=true
# 2. Ensure GEMINI_API_KEY is configured (for script generation)
# 3. Set up Google Cloud TTS:
#    a. Create Google Cloud project and enable Text-to-Speech API
#    b. Create service account and download JSON key file
#    c. Set GOOGLE_TTS_CREDENTIALS_PATH to the JSON file path
#    OR set GOOGLE_CLOUD_API_KEY if using API key authentication
# 4. Configure TTS settings (language, voice, encoding)
# 5. Set audio storage path and cleanup policy
#
# The system will automatically:
# - Generate podcast scripts from Super Gems analysis
# - Convert scripts to high-quality MP3 audio
# - Serve audio through the web interface
# - Clean up old files based on retention policy